#!/usr/bin/env bash

DEVICES=$(mpremote connect list | grep MicroPython | cut -d " " -f 1)

if [ -z $DEVICES ] ; then
  echo "No MicroPython devices found in FS mode"
  exit 1
fi

DEVICE=${DEVICES[0]}

function echo_command_exit_code() {
  if [ $1 -eq 0 ]; then
    echo " .. done!"
  else
    echo " .. failed!"
  fi
}

function create_directory {
  echo -n "> creating directory $1"

  RESULT=$(mpremote connect ${DEVICE} mkdir $1)
  ERROR=$?


  if [ $ERROR -eq 0 ] ; then
    echo " .. done!"
  else
    if [[ "$RESULT" == *"EEXIST"* ]] ; then
      echo " .. already exists, skipping."
    else
      echo " .. failed!"
      echo "! it looks like this device is already in use - is Thonny running?"
      exit 1
    fi
  fi
}

function copy {
  for file in $1
  do
    echo -n "> copying file '$file' to: '$2'"
    mpremote connect ${DEVICE} cp $file $2 > /dev/null
    echo_command_exit_code $?
  done
}

# TODO Maybe do not edit the file but create a constants.py.curr and rename it on copy to the device
function update_git_rev() {
  file="${1:?"Need a file to update the rev as first argument"}"
  rev="${2:?"Need a git rev as second argument!"}"
  echo -n "> Updating Git REV in constants"
  # TODO Nasty hack to get it work on MacOS AND Linux'. Remove by utilising a Docker image ie. bash image if needed
  if [[ "$OSTYPE" == "darwin"* ]]; then
    sed -i '' -E "s/^(GIT_REV: str =).*/\1 '$rev'/" "$file"
  else
    sed -i -E "s/^(GIT_REV: str =).*/\1 '$rev'/" "$file"
  fi
  echo_command_exit_code $?
}

function get_uid() {
  mpremote connect ${DEVICE} exec "import machine; print('{:02x}{:02x}{:02x}{:02x}{:02x}{:02x}{:02x}{:02x}'.format(*machine.unique_id()))"
}

function upload_actual_config() {
  act_config_file="configs/$(get_uid)-config.py"
  echo -n "> Copying actual config for this board"
  if [ -f "$act_config_file" ]; then
    if copy "$act_config_file" :config.py; then
      echo " .. done!"
    else
      echo " .. failed!"
    fi
  else
    echo " .. No config found for this board. Missing file: '$act_config_file'"
  fi
}

function download() {
  file="${1:?"Must specify a file to download from the remote filesystem!"}"
  out_dir="${2:-"./"}"
  out_file="$(date "+%Y-%m-%d_%H-%M-%S")-$(basename "$file")"
  echo -n "> download file '$file' to: '$out_dir' as '$out_file'"
  if [[ "." != "$out_dir" ]]; then
    mkdir -p "$out_dir"
  fi

  echo_command_exit_code "$(mpremote connect ${DEVICE} cp "$file" "$out_dir/$out_file" > /dev/null)"
  #if mpremote connect ${DEVICE} cp "$file" "$out_dir/$out_file" > /dev/null; then
  #  echo " .. done!"
  #else
  #  echo " .. failed!"
  #fi
}

function clean_up() {
  echo "> Cleaning current content on device..."
  # Would be nice to provide the dirs dynamically. But mpremote run seems not to pass on
  # arguments to the script. Therefor the dirs to clean are hard coded in the python script!
  files="main.py log.txt"
  for file in $files; do
    echo "> Removing '$file"
    mpremote connect ${DEVICE} rm ":$file" 2&> /dev/null
    echo_command_exit_code $?
  done
  echo "> Cleaning directories..."
  mpremote connect ${DEVICE} run install_on_device_fs_helper.py
  echo_command_exit_code $?
  echo "> Cleaning done. Content still on the device is:"
  mpremote connect ${DEVICE} ls :
}

current_uid="$(get_uid)"
current_git_rev="$(git rev-parse --short HEAD)"


echo "> Working with device: '${DEVICE}' with the UID: '$current_uid' on Git rev: '$current_git_rev'"

echo "> Downloading files...."

download ":log.txt" "./logs_dl/$current_uid"
download ":config.py" "./configs/$current_uid"

clean_up

update_git_rev :enviro/constants.py $current_git_rev

echo "> Uploading Enviro firmware files..."

create_directory enviro
create_directory enviro/boards
create_directory enviro/destinations
create_directory enviro/html
create_directory enviro/html/images
create_directory phew
create_directory phew/phew

copy "main.py" :

copy "enviro/*.py" :enviro/

copy "enviro/boards/*.py" :enviro/boards/
copy "enviro/destinations/*.py" :enviro/destinations/

copy "enviro/html/*.html" :enviro/html/

copy "enviro/html/images/*" :enviro/html/images/

copy "phew/__init__.py" :phew/
copy "phew/phew/*.py" :phew/phew/

upload_actual_config

